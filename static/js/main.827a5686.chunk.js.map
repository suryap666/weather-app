{"version":3,"sources":["serviceWorker.ts","components/AppBar.tsx","Shared.ts","components/WeatherSelected.tsx","components/WeatherCards.tsx","components/WeatherGrids.tsx","services/ForeCastServices.ts","components/CustomizedSnackbars.tsx","components/App.tsx","Router.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","display","breakpoints","up","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","width","searchIcon","height","pointerEvents","alignItems","justifyContent","inputRoot","color","inputInput","padding","transition","transitions","create","SearchBar","props","classes","className","CssBaseline","AppBar","Toolbar","IconButton","edge","aria-label","Typography","variant","noWrap","onSubmit","getForeCast","InputBase","placeholder","input","inputProps","onChange","event","textChanged","target","value","tempUnit","sunnyColor","deepOrange","moreThanTwentyColor","bothSunnyAndMoreThanTwenty","backgroundImage","this","getCurrentTemp","temps","hours","Date","now","getHours","morn","day","eve","night","getDay","index","getDate","seconds","date","getMonth","getFullYear","getDateString","isDay","isTemperatureGreater","temperature","baseTemperature","valueToCompare","parseInt","replace","Math","round","Object","values","temp","reduce","sum","current","length","Daily","styled","ul","Temperature","h1","WeatherDiv","div","DateRow","CurrentDate","h2","WeatherType","h3","grey","WeatherSelected","Shared","dt","weather","description","id","style","WeatherCards","split","onClick","weatherDescription","isTempGreaterThanTwenty","averageTemperature","getStyle","paper","textAlign","background","blue","A200","minHeight","WeatherGrids","Grid","container","item","xs","Paper","headerDay","forecast","list","map","key","onClickUpdate","apiKey","baseUrl","getForecastByCity","city","a","fetch","response","contentType","headers","get","status","indexOf","json","Alert","elevation","marginTop","CustomizedSnackbars","Snackbar","open","severity","showMessage","App","useState","searchValue","setSearchValue","setForecast","setShowMessage","setHeaderDay","getWeatherForeCastByCity","e","preventDefault","ForeCastServices","foreCast","cityName","Router","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.827a5686.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport {createStyles, fade, Theme, makeStyles} from '@material-ui/core/styles';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport {CssBaseline} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        title: {\r\n            flexGrow: 1,\r\n            display: 'none',\r\n            [theme.breakpoints.up('sm')]: {\r\n                display: 'block',\r\n            },\r\n        },\r\n        search: {\r\n            position: 'relative',\r\n            borderRadius: theme.shape.borderRadius,\r\n            backgroundColor: fade(theme.palette.common.white, 0.15),\r\n            '&:hover': {\r\n                backgroundColor: fade(theme.palette.common.white, 0.25),\r\n            },\r\n            marginLeft: 0,\r\n            width: '100%',\r\n            [theme.breakpoints.up('sm')]: {\r\n                marginLeft: theme.spacing(1),\r\n                width: 'auto',\r\n            },\r\n        },\r\n        searchIcon: {\r\n            width: theme.spacing(7),\r\n            height: '100%',\r\n            position: 'absolute',\r\n            pointerEvents: 'none',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n        },\r\n        inputRoot: {\r\n            color: 'inherit',\r\n        },\r\n        inputInput: {\r\n            padding: theme.spacing(1, 1, 1, 7),\r\n            transition: theme.transitions.create('width'),\r\n            width: '100%',\r\n            [theme.breakpoints.up('sm')]: {\r\n                width: 120,\r\n                '&:focus': {\r\n                    width: 200,\r\n                },\r\n            },\r\n        },\r\n    }),\r\n);\r\n\r\nconst SearchBar: React.FunctionComponent<IAppBarProps> = props => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        edge=\"start\"\r\n                        className={classes.menuButton}\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                    >\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography className={classes.title} variant=\"h6\" noWrap>\r\n                        Weather Forecast\r\n                    </Typography>\r\n                    <div className={classes.search}>\r\n                        <div className={classes.searchIcon}>\r\n                            <SearchIcon/>\r\n                        </div>\r\n                        <form onSubmit={props.getForeCast}>\r\n                            <InputBase\r\n                                placeholder=\"Search City…\"\r\n                                classes={{\r\n                                    root: classes.inputRoot,\r\n                                    input: classes.inputInput,\r\n                                }}\r\n                                inputProps={{'aria-label': 'search'}}\r\n                                onChange={event => props.textChanged(event.target.value)}\r\n                            />\r\n                        </form>\r\n                    </div>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    )\r\n        ;\r\n};\r\n\r\ninterface IAppBarProps {\r\n    textChanged: (e: any) => any;\r\n    getForeCast: (e: any) => any;\r\n}\r\n\r\nexport default SearchBar;\r\n","import {FeelsLike, List} from \"./model/Forecast\";\r\nimport {deepOrange} from \"@material-ui/core/colors\";\r\n\r\nclass Shared {\r\n    public tempUnit = 'C';\r\n    public sunnyColor = deepOrange[50];\r\n    public moreThanTwentyColor = 'orange';\r\n    public bothSunnyAndMoreThanTwenty =  {backgroundImage: `linear-gradient(red, ${this.sunnyColor})`};\r\n\r\n    public averageTemperature(day: List) {\r\n        return `${Math.round(\r\n            Object.values(day.temp).reduce(\r\n                (sum, current) => sum + current) / Object.values(day.temp).length)}°${this.tempUnit}`\r\n    }\r\n\r\n    public getCurrentTemp = (temps: FeelsLike) => {\r\n        const hours = new Date(Date.now()).getHours();\r\n\r\n        if (hours >= 6 && hours < 12) {\r\n            return `${temps.morn}°${this.tempUnit}`;\r\n        } else if (hours >= 12 && hours < 18) {\r\n            return `${temps.day}°${this.tempUnit}`;\r\n        } else if (hours >= 18 && hours < 24) {\r\n            return `${temps.eve}°${this.tempUnit}`;\r\n        } else {\r\n            return `${temps.night}°${this.tempUnit}`;\r\n        }\r\n    };\r\n\r\n    public getDay = (index: number) => {\r\n        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n        return days[index];\r\n    };\r\n\r\n    public getDate = (seconds: number) => {\r\n        const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n        const date = new Date(seconds * 1000);\r\n        return `${months[date.getMonth()]} ${date.getDate()} ${date.getFullYear()}`;\r\n    };\r\n\r\n    public getDateString = (seconds: number) => {\r\n        const date = new Date(seconds * 1000);\r\n        return `${this.getDay(date.getDay())}, ${this.getDate(seconds)}`;\r\n    };\r\n\r\n    public isDay = () => {\r\n        const hours = new Date(Date.now()).getHours();\r\n        return hours >= 7 && hours <= 20;\r\n    };\r\n\r\n    public isTemperatureGreater = (temperature: string,  baseTemperature: number = 20) => {\r\n        let valueToCompare = parseInt(temperature.replace('°C', ''));\r\n        return valueToCompare > baseTemperature;\r\n    }\r\n}\r\n\r\n\r\nexport default new Shared();\r\n","import {List} from \"../model/Forecast\";\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport grey from '@material-ui/core/colors/grey';\r\nimport Shared from \"../Shared\";\r\n\r\nconst Daily = styled.ul`\r\n  margin: 0;\r\n  padding: 0;\r\n  list-style: none;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-left: 70px;\r\n\r\n  @media (max-width: 700px) {\r\n    margin: 20px 0;\r\n  }\r\n\r\n  li {\r\n    display: flex;\r\n    justify-content: space-between;\r\n  }\r\n    \r\n   span{\r\n     margin: 5px 0;\r\n    }\r\n\r\n  p {\r\n    width: 250px;\r\n    margin: 5px 0;\r\n    font-size: 18px;\r\n    padding-right: 20px;\r\n    text-align: right;\r\n  }`;\r\n\r\nconst Temperature = styled.h1`\r\n  font-size: 50px;\r\n  margin-right: 70px;\r\n\r\n  @media (max-width: 700px) {\r\n    font-size: 70px;\r\n    margin: 30px 0;\r\n  }`;\r\n\r\nconst WeatherDiv = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  @media (max-width: 700px) {\r\n    flex-direction: column;\r\n  }\r\n\r\n  i {\r\n    font-size: 120px;\r\n    margin-top: -30px;\r\n\r\n    @media (max-width: 700px) {\r\n      font-size: 70px;\r\n    }\r\n  }`;\r\n\r\nconst DateRow = styled.div`\r\n  margin-left: 20px;\r\n  float: left;\r\n`;\r\n\r\nconst CurrentDate = styled.h2`\r\n  margin: 0;\r\n`;\r\n\r\nconst WeatherType = styled.h3`\r\n  margin: 0;\r\n  font-weight: normal;\r\n  text-transform: capitalize;\r\n  float: left;\r\n  color: ${grey[900]};\r\n  font-weight: bold;\r\n`;\r\n\r\n\r\nconst WeatherSelected: React.FunctionComponent<IWeatherProps> = props => {\r\n    return (\r\n        <div className={'weather-today-today'}>\r\n            <DateRow>\r\n                <CurrentDate>{Shared.getDateString(props.day.dt)}</CurrentDate>\r\n                <WeatherType>{props.day.weather[0].description}</WeatherType>\r\n            </DateRow>\r\n            <WeatherDiv>\r\n                <Temperature>{`${Shared.getCurrentTemp(props.day.temp)}`}</Temperature>\r\n                <i className={`wi wi-owm-${Shared.isDay() ? 'day' : 'night'}-${props.day.weather[0].id}`}/>\r\n                <Daily>\r\n                    <li>\r\n                        <p>Morning</p>\r\n                        <span>{`${props.day.temp.morn}°${Shared.tempUnit}`}</span>\r\n                    </li>\r\n                    <li>\r\n                        <p>Afternoon</p>\r\n                        <span>{`${props.day.temp.day}°${Shared.tempUnit}`}</span>\r\n                    </li>\r\n                    <li>\r\n                        <p>Evening</p>\r\n                        <span>{`${props.day.temp.eve}°${Shared.tempUnit}`}</span>\r\n                    </li>\r\n                    <li>\r\n                        <p>Night</p>\r\n                        <span>{`${props.day.temp.night}°${Shared.tempUnit}`}</span>\r\n                    </li>\r\n                </Daily>\r\n\r\n                <Daily>\r\n                    <li>\r\n                        <p>Sunny</p>\r\n                        <span style={{backgroundColor: Shared.sunnyColor}}>color</span>\r\n                    </li>\r\n                    <li>\r\n                        <p>More than 20°C</p>\r\n                        <span style={{backgroundColor: Shared.moreThanTwentyColor}}>color</span>\r\n                    </li>\r\n                    <li>\r\n                        <p>Sunny & More than 20°C</p>\r\n                        <span style={Shared.bothSunnyAndMoreThanTwenty}>color</span>\r\n                    </li>\r\n                </Daily>\r\n            </WeatherDiv>\r\n        </div>\r\n    );\r\n};\r\n\r\ninterface IWeatherProps {\r\n    day: List;\r\n}\r\n\r\nexport default WeatherSelected;\r\n\r\n","import React from \"react\";\r\nimport {List} from \"../model/Forecast\";\r\nimport styled from \"styled-components\";\r\nimport Shared from \"../Shared\";\r\n\r\nconst WeatherDiv = styled.div`\r\n  padding: 10px;\r\n  border-radius: 15px;\r\n  &:hover  {\r\n    transform: scale(1.1);\r\n    cursor: pointer;\r\n  }\r\n  i {\r\n    font-size: 40px;\r\n   }`;\r\n\r\n\r\nconst WeatherCards: React.FunctionComponent<IWeatherProps> = props => {\r\n    function getStyle() {\r\n        const weatherDescription = props.day.weather[0].description;\r\n        const isTempGreaterThanTwenty = Shared.isTemperatureGreater(Shared.averageTemperature(props.day));\r\n        let color: string = '#448aff';\r\n        if (isTempGreaterThanTwenty && weatherDescription === 'sky is clear') {\r\n            return Shared.bothSunnyAndMoreThanTwenty;\r\n        } else if (isTempGreaterThanTwenty) {\r\n            color = Shared.moreThanTwentyColor;\r\n        } else if (weatherDescription === 'sky is clear') {\r\n            color = Shared.sunnyColor;\r\n        }\r\n\r\n        return {backgroundColor: color};\r\n    }\r\n    const [day, date] = Shared.getDateString(props.day.dt).split(',');\r\n\r\n    return (\r\n        <WeatherDiv\r\n            onClick={() => props.onClick(props.day)}\r\n            style={getStyle()}\r\n        >\r\n            <h3>{date}</h3>\r\n            <h4>{day}</h4>\r\n            <i className={`wi wi-owm-${props.day.weather[0].id}`}/>\r\n            <p>\r\n                Average: {Shared.averageTemperature(props.day)}\r\n            </p>\r\n        </WeatherDiv>\r\n    );\r\n};\r\n\r\ninterface IWeatherProps {\r\n    day: List;\r\n    onClick: (day: List) => any;\r\n}\r\n\r\nexport default WeatherCards;\r\n","import React from 'react';\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport {blue} from \"@material-ui/core/colors\";\r\nimport {Forecast, List} from \"../model/Forecast\";\r\nimport WeatherSelected from \"./WeatherSelected\";\r\nimport WeatherCards from \"./WeatherCards\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        paper: {\r\n            padding: theme.spacing(2),\r\n            textAlign: 'center',\r\n            background: blue.A200,\r\n            minHeight: '200px',\r\n        },\r\n    }),\r\n);\r\n\r\nconst WeatherGrids: React.FunctionComponent<IWeatherGridProps> = props => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={12}>\r\n                    <Paper className={classes.paper}>\r\n                        <WeatherSelected day={props.headerDay ?? props.forecast.list[0]}/>\r\n                    </Paper>\r\n                </Grid>\r\n                {props.forecast.list.map(day => (\r\n                    <Grid item xs={2} key={day.dt}>\r\n                        <Paper className={classes.paper}>\r\n                            <WeatherCards day={day} onClick={props.onClickUpdate}/>\r\n                        </Paper>\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WeatherGrids;\r\n\r\ninterface IWeatherGridProps {\r\n    forecast: Forecast;\r\n    searchValue: string;\r\n    onClickUpdate: (day: List) => any;\r\n    headerDay: List | undefined;\r\n}\r\n","import {Forecast} from \"../model/Forecast\";\r\n\r\nclass ForeCastServices {\r\n    public apiKey = 'dbb624c32c7f0d652500552c5ebbde56';\r\n    public baseUrl: string = 'https://api.openweathermap.org/data/2.5/forecast';\r\n\r\n    public getForecastByCity = async (city: string): Promise<null | Forecast> => {\r\n        const response = await\r\n            fetch(`${this.baseUrl}/daily?q=${city}&units=metric&cnt=8&appid=${this.apiKey}`);\r\n        const contentType = response.headers.get(\"content-type\");\r\n        if(response.status === 200 && contentType && contentType.indexOf(\"application/json\") !== -1){\r\n            return await response.json();\r\n        }else{\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nexport default new ForeCastServices();\r\n\r\n\r\n","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {makeStyles, Theme} from '@material-ui/core/styles';\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    },\r\n}));\r\n\r\nconst CustomizedSnackbars: React.FunctionComponent<ICustomizedSnackbarsProps> = props => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Snackbar open={true}>\r\n                <Alert severity={props.showMessage}>\r\n                    {props.showMessage === 'info' ? 'Search for a city!' : `City name does not exist`}\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n    );\r\n};\r\n\r\ninterface ICustomizedSnackbarsProps {\r\n    showMessage: 'success' | 'info' | 'warning' | 'error';\r\n}\r\n\r\nexport default CustomizedSnackbars;\r\n","import React, {useState} from 'react';\r\nimport SearchAppBar from \"./AppBar\";\r\nimport WeatherGrids from \"./WeatherGrids\";\r\nimport ForeCastServices from \"../services/ForeCastServices\";\r\nimport {Forecast, List} from \"../model/Forecast\";\r\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\r\nimport CustomizedSnackbars from \"./CustomizedSnackbars\";\r\n\r\nconst App: React.FunctionComponent<IAppProps> = (props) => {\r\n\r\n    const [searchValue, setSearchValue] = useState('');\r\n    const [forecast, setForecast] = useState<Forecast | null>(null);\r\n    const [showMessage, setShowMessage] = useState<'success' | 'info' | 'warning' | 'error'>('info');\r\n    const [headerDay, setHeaderDay] = useState<List>();\r\n\r\n    const handleSearchInput = (cityName: string) => {\r\n        setSearchValue(cityName);\r\n    };\r\n\r\n    const onClickUpdate = (day: List) => {\r\n        setHeaderDay(day);\r\n    };\r\n\r\n    const getWeatherForeCastByCity = async (e: Event) => {\r\n        e.preventDefault();\r\n        const foreCast = await ForeCastServices.getForecastByCity(searchValue);\r\n\r\n        if (foreCast) {\r\n            setForecast(foreCast);\r\n            setHeaderDay(foreCast.list[0])\r\n        } else {\r\n            setForecast(null);\r\n            setShowMessage('error');\r\n    }\r\n    };\r\n\r\n    return (\r\n        <MuiThemeProvider>\r\n            <div className={'app'}>\r\n                <SearchAppBar\r\n                    getForeCast={getWeatherForeCastByCity}\r\n                    textChanged={handleSearchInput}\r\n                />\r\n                {forecast === null ?\r\n                    <CustomizedSnackbars showMessage={showMessage}/> :\r\n                    <WeatherGrids\r\n                        forecast={forecast}\r\n                        searchValue={searchValue}\r\n                        onClickUpdate={onClickUpdate}\r\n                        headerDay={headerDay}\r\n                    />}\r\n            </div>\r\n        </MuiThemeProvider>\r\n    );\r\n};\r\n\r\ninterface IAppProps {\r\n}\r\n\r\ninterface IAppState {\r\n    searchValue: string;\r\n}\r\n\r\nexport default App;\r\n","import * as React from 'react';\r\nimport {HashRouter, Route, Switch} from 'react-router-dom';\r\nimport App from \"./components/App\";\r\nimport 'weathericons/css/weather-icons.min.css';\r\n\r\nconst Router: React.FunctionComponent<IRouterProps> = props => {\r\n    return (\r\n        <HashRouter>\r\n            <main className={'container'}>\r\n                <Switch>\r\n                    <Route exact path='/' component={App}/>\r\n                </Switch>\r\n            </main>\r\n        </HashRouter>\r\n    )\r\n};\r\n\r\nexport default Router;\r\n\r\ninterface IRouterProps {}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'typeface-roboto';\r\nimport Router from './Router'\r\n\r\nReactDOM.render(<Router />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}